{"version":3,"sources":["../../src/models/model.js"],"names":["Model","ctx","name","modelName","collection","db","_schema","_fields","cache","modelDidLoad","id","err","console","log","query","options","Promise","resolve","reject","findOne","result","filter","find","limit","get","skip","sort","created","toArray","results","toString","model","set","remove","clear","count","cacheGet","isValid","objectId","_id","cacheSet","aggregate","allowDiskUse","email","regex","test","fields","uniqueFields","data","passwordFields","errors","each","field","fieldName","isRequired","value","isEmail","isUnique","isPassword","isObjectId","isMinLength","isLowercase","toLower","push","length","hashSync","Array","isArray","v","index","uniq","objectIds","load","originalModel","originPassword","compareSync","unset","uniqueFieldNames","orQuery","f","fieldValue","trim","subQuery","$eq","$and","$or","$ne","then","validateError","join","catch","validate","beforeCreate","insertOne","info","afterCreate","payload","event","notification","attr","key","setWith","update","Date","beforeUpdate","updateOne","$set","afterUpdate","beforeDelete","cacheRemove","deleteOne","afterDelete","accessType","role","permission","req","models","user","getUserRolesFromRequest","roles","roleRegister","dynamicRoles","concat","checkPermissionByRoles","isAllowed","permissions","perm","accessTypeRule","userId","type","schema","args","request","allowed","checkPermission","defaultValue","root","create","delete","description"],"mappings":"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","file":"model.js","sourcesContent":["import {\n    GraphQLObjectType,\n    GraphQLInt,\n    GraphQLNonNull,\n    GraphQLList,\n    GraphQLID,\n} from 'graphql';\nimport {ObjectID} from 'mongodb'\nimport bcrypt from 'bcrypt'\nimport _ from 'lodash'\nimport {Map} from 'immutable'\nimport 'babel-polyfill'\n\nexport default class Model {\n\n    constructor(ctx, name) {\n        this.ctx = ctx;\n        this.modelName = name;\n        this.collection = this.ctx.db.collection(name);\n\n        this._schema = null;\n        this._fields = null;\n        this.cache = new Map();\n\n        this.modelDidLoad();\n    }\n\n    modelDidLoad() {\n\n    }\n\n    /**\n     * Create object Id\n     * @param id\n     * @returns {*}\n     */\n    objectId(id) {\n\n\n        if (typeof id !== 'string') {\n\n            return id;\n        }\n\n        try {\n\n            id = new ObjectID(id);\n\n        }\n        catch (err) {\n\n            console.log(err);\n        }\n\n        return id;\n    }\n\n\n    /**\n     * Find one model\n     * @param query\n     * @param options\n     * @returns {Promise<any>}\n     */\n    findOne(query, options = null) {\n\n        return new Promise((resolve, reject) => {\n\n            this.collection.findOne(query, options, (err, result) => {\n                return err ? reject(err) : resolve(result);\n            });\n        })\n    }\n\n    /**\n     * Find model\n     * @param query\n     * @param filter\n     * @returns {Promise<any>}\n     */\n    find(query = {}, filter = {}) {\n\n        return new Promise((resolve, reject) => {\n\n            this.collection.find(query).limit(_.get(filter, 'limit', 50)).skip(_.get(filter, 'skip', 0)).sort({created: -1}).toArray((err, results) => {\n\n                return err ? reject(err) : resolve(results);\n            });\n\n        });\n\n\n    }\n\n    /**\n     * Get model in cache by String ID\n     * @param id\n     * @returns {V | undefined}\n     */\n    cacheGet(id) {\n\n        if ((typeof id) !== \"string\") {\n            id = _.toString(id)\n        }\n\n\n        return this.cache.get(id);\n\n    }\n\n    /**\n     * Save Model to cache\n     * @param id\n     * @param model\n     */\n    cacheSet(id, model) {\n\n        if (typeof id !== \"string\") {\n            id = _.toString(id)\n        }\n\n        this.cache = this.cache.set(id, model)\n    }\n\n    /**\n     * Remove model from cache\n     * @param id\n     */\n    cacheRemove(id) {\n        if (typeof id !== \"string\") {\n            id = _.toString(id)\n        }\n        this.cache = this.cache.remove(id);\n\n    }\n\n    /**\n     * Clear cache\n     */\n    clearCache() {\n\n        this.cache = this.cache.clear();\n    }\n\n    count(query, options = null) {\n\n        return new Promise((resolve, reject) => {\n\n            this.collection.count(query, options, (err, result) => {\n                return err ? reject(err) : resolve(result ? result : 0);\n            })\n        })\n    }\n\n    /**\n     * Get model\n     * @param id\n     * @returns {Promise<any>}\n     */\n    load(id) {\n\n        return new Promise((resolve, reject) => {\n\n            const cache = this.cacheGet(id);\n            if (cache) {\n                return resolve(cache);\n            }\n            if (!ObjectID.isValid(id)) {\n                return reject(\"Invalid ID\");\n            }\n\n            id = this.objectId(id);\n\n\n            this.collection.findOne({_id: id}, (err, model) => {\n\n                if (err === null && model) {\n                    this.cacheSet(id, model);\n                }\n                return err || !model ? reject('Not found') : resolve(model);\n            });\n\n\n        });\n    }\n\n    /**\n     * Aggregate query\n     * @param query\n     * @returns {Promise<any>}\n     */\n    aggregate(query) {\n\n        return new Promise((resolve, reject) => {\n\n            this.collection.aggregate(query, {allowDiskUse: true}, (err, result) => {\n\n                if (err) {\n                    return reject(err);\n                }\n                result.toArray((err, results) => {\n\n                    return err ? reject(err) : resolve(results);\n                })\n            });\n\n        })\n    }\n\n    /**\n     * Validate email address\n     * @param email\n     * @returns {boolean}\n     */\n    isEmail(email = \"\") {\n\n        const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n        return regex.test(email);\n    }\n\n    /**\n     * Validate model before save\n     * @returns {Promise<any>}\n     */\n    async validate(id = null, model) {\n\n        const fields = this.fields();\n        let uniqueFields = [];\n        let data = {};\n        let passwordFields = [];\n        let errors = [];\n\n        _.each(fields, (field, fieldName) => {\n\n            const isRequired = _.get(field, 'required', false);\n            let value = _.get(model, fieldName);\n            const isEmail = _.get(field, 'email', false);\n            const isUnique = _.get(field, 'unique', false);\n            const isPassword = _.get(field, 'password', false);\n            const isObjectId = _.get(field, 'objectId', false);\n            const isMinLength = _.get(field, 'minLength', 0);\n            const isLowercase = _.get(field, 'lowercase', false);\n\n            data[fieldName] = _.get(model, fieldName, _.get(field, 'defaultValue'));\n            if (isEmail) {\n                data[fieldName] = _.toLower(_.get(data, fieldName));\n            }\n            if (isLowercase) {\n                data[fieldName] = _.toLower(_.get(data, fieldName));\n            }\n\n            if (isUnique) {\n                uniqueFields.push({name: fieldName, value: value});\n            }\n            if (isEmail && !this.isEmail(value)) {\n                errors.push(`${fieldName} must be an email format.`)\n            }\n            if (isRequired && (!value && value === \"\")) {\n                if (!isPassword && id !== null) {\n                    errors.push(`${fieldName} is required.`);\n                }\n\n            }\n            if (!isPassword && isMinLength && value.length < isMinLength) {\n                errors.push(`${fieldName} must greater than ${isMinLength} characters.`);\n            }\n            if (isPassword) {\n                passwordFields.push({name: fieldName, value: value});\n            }\n            if (isPassword && id === null && (!value || value === \"\" || value.length < isMinLength)) {\n                errors.push(`${fieldName} must greater than ${isMinLength} characters.`);\n            }\n            if (isPassword && value && value !== \"\" && value.length >= isMinLength) {\n                data[fieldName] = bcrypt.hashSync(_.get(data, fieldName), 10);\n            }\n\n            if (isObjectId) {\n                if (Array.isArray(value)) {\n\n                    _.each(value, (v, index) => {\n\n                        value[index] = _.toString(v);\n                    });\n\n                    value = _.uniq(value);\n\n                    let objectIds = [];\n\n                    _.each(value, (v) => {\n                        if (!ObjectID.isValid(v)) {\n                            errors.push(`${fieldName} is invalid`);\n                        }\n                        objectIds.push(this.objectId(v));\n                    });\n\n                    data[fieldName] = objectIds;\n\n                } else {\n                    if (!ObjectID.isValid(value)) {\n\n                        errors.push(`${fieldName} is invalid`);\n                    }\n\n                    data[fieldName] = this.objectId(value);\n                }\n            }\n        });\n\n\n        if (passwordFields.length && id) {\n            const originalModel = await this.load(id);\n            _.each(passwordFields, (field) => {\n                const originPassword = _.get(originalModel, field.name);\n                if (!field.value || field.value === \"\" || field.value === originPassword || bcrypt.compareSync(field.value, originPassword)) {\n                    data[field.name] = originPassword;\n                }\n\n            });\n        }\n\n        if (!id) {\n            _.unset(data, '_id');\n        }\n\n        return new Promise((resolve, reject) => {\n\n\n            if (errors.length) {\n                return reject(errors);\n            }\n            if (uniqueFields.length) {\n\n                let uniqueFieldNames = [];\n\n                let orQuery = [];\n\n                _.each(uniqueFields, (f) => {\n                    const fieldName = f.name;\n                    const fieldValue = _.toLower(_.trim(f.value));\n\n                    let subQuery = {};\n\n                    subQuery[fieldName] = {$eq: fieldValue};\n                    orQuery.push(subQuery);\n                    uniqueFieldNames.push(f.name);\n\n                });\n\n\n                let query = {\n                    $and: [],\n                };\n\n                query.$and.push({$or: orQuery});\n\n                if (id) {\n                    query.$and.push({_id: {$ne: this.objectId(id)}});\n\n                }\n                this.findOne(query, null).then((result) => {\n\n                    if (result !== null) {\n\n                        let validateError = null;\n\n                        if (uniqueFieldNames.length) {\n                            validateError = `${_.join(uniqueFieldNames, ', ')} is already used please choose another one.`;\n                        }\n                        return reject(validateError);\n                    }\n\n                    resolve(data);\n\n                }).catch((err) => {\n\n                    return reject(err);\n\n                });\n\n\n            } else {\n                return resolve(data)\n            }\n\n\n        });\n\n    }\n\n    /**\n     * Event before model is create\n     * @param model\n     * @returns {Promise<any>}\n     */\n    beforeCreate(model) {\n        return new Promise((resolve, reject) => {\n            return resolve(model);\n        });\n    }\n\n    /**\n     * Create model\n     * @param model\n     * @returns {Promise<any>}\n     */\n    create(model = {}) {\n\n        return new Promise((resolve, reject) => {\n\n            this.validate(null, model).then((model) => {\n\n                this.beforeCreate(model).then((model) => {\n\n                    this.collection.insertOne(model, (err, info) => {\n\n                        if (!err) {\n                            this.cacheSet(_.get(model, '_id'), model);\n\n                            this.afterCreate(model).then((model) => {\n\n                            });\n                        }\n                        return err ? reject(err) : resolve(model);\n                    });\n\n                }).catch((err) => {\n                    return reject(err);\n                });\n\n\n            }).catch((err) => {\n\n                return reject(err);\n            });\n\n\n        });\n    }\n\n    /**\n     * Event will fired after model is created.\n     * @param model\n     * @returns {Promise<any>}\n     */\n    afterCreate(model) {\n        return new Promise((resolve, reject) => {\n\n            const payload = {\n                event: 'model_added',\n                modelName: this.modelName,\n                model: model,\n            };\n\n            this.notification(payload).then(() => {\n\n            });\n\n            return resolve(model);\n\n\n        });\n    }\n\n\n    /**\n     * Before update model\n     * @param id\n     * @param model\n     * @returns {Promise<any>}\n     */\n    beforeUpdate(id, model) {\n\n        return new Promise((resolve, reject) => {\n\n            return resolve(model);\n        })\n    }\n\n    /**\n     * After model is updated\n     * @param id\n     * @param model\n     * @returns {Promise<any>}\n     */\n    afterUpdate(id, model) {\n\n        return new Promise((resolve, reject) => {\n\n            const payload = {\n                event: 'model_updated',\n                modelName: this.modelName,\n                model: model\n            };\n\n            this.notification(payload).then(() => {\n\n            });\n\n            return resolve(model);\n        });\n    }\n\n    /**\n     *\n     * @param payload\n     * @returns {Promise<any>}\n     */\n\n    notification(payload) {\n        return new Promise((resolve, reject) => {\n            return resolve(payload);\n        })\n    }\n\n    /**\n     * Update model attribute\n     * @param id\n     * @param attr\n     * @returns {Promise<any>}\n     */\n    async updateAttribute(id, attr) {\n\n        let model = await this.load(id);\n\n        _.each(attr, (value, key) => {\n            model = _.setWith(model, key, value);\n        });\n        return this.update(id, model);\n\n    }\n\n    /**\n     * Update model\n     * @param id\n     * @param model\n     * @returns {Promise<any>}\n     */\n    update(id = null, model) {\n\n        return new Promise((resolve, reject) => {\n            if (!id || !ObjectID.isValid(id)) {\n                return reject(\"Invalid ID\");\n            }\n            this.validate(id, model).then((model) => {\n\n                const fields = this.fields();\n\n                id = this.objectId(id);\n\n                const query = {\n                    _id: id\n                };\n\n                if (_.get(fields, 'updated')) {\n                    model = _.setWith(model, 'updated', new Date());\n                }\n                model = _.setWith(model, '_id', id);\n\n\n                this.beforeUpdate(id, model).then((model) => {\n                    this.collection.updateOne(query, {$set: model}, (err, result) => {\n                        if (err || !_.get(result, 'matchedCount')) {\n                            return reject(err ? err : 'Model not found');\n                        }\n\n                        this.afterUpdate(id, model).then(() => {\n\n                        });\n\n                        this.cacheSet(id, model);\n\n                        return resolve(model);\n\n                    });\n\n                }).catch((err) => {\n                    return reject(err);\n                });\n\n\n            }).catch((err) => {\n                return reject(err);\n            })\n\n        });\n    }\n\n    /**\n     * Before delete model\n     * @param id\n     * @returns {Promise<any>}\n     */\n    beforeDelete(id) {\n\n        return new Promise((resolve, reject) => {\n            return resolve(id);\n        })\n    }\n\n    /**\n     * After model is deleted\n     * @param id\n     * @returns {Promise<any>}\n     */\n    afterDelete(id) {\n\n        return new Promise((resolve, reject) => {\n            const payload = {\n                event: 'model_deleted',\n                modelName: this.modelName,\n                model: null,\n                id: id,\n            };\n\n            this.notification(payload).then(() => {\n            });\n\n            return resolve(id);\n        });\n    }\n\n    /**\n     * Delete model\n     * @param id\n     * @returns {Promise<any>}\n     */\n    delete(id) {\n\n        return new Promise((resolve, reject) => {\n\n            if (!id || !ObjectID.isValid(id)) {\n                return reject(\"Invalid ID\");\n            }\n\n            id = this.objectId(id);\n\n            this.beforeDelete(id).then(() => {\n                this.cacheRemove(id);\n\n                this.collection.deleteOne({_id: id}, (err, result) => {\n\n                    if (err === null) {\n\n                        this.afterDelete(id).then(() => {\n\n                        });\n                    }\n                    return err ? reject(err) : resolve({\n                        _id: id\n                    });\n\n\n                });\n\n            }).catch((err) => {\n\n                return reject(err);\n            });\n\n\n        })\n    }\n\n\n    /**\n     * permission\n     */\n    permissions() {\n\n        return [\n            {\n                accessType: '*',\n                role: 'everyone',\n                permission: 'DENY'\n            },\n            {\n                accessType: '*',\n                role: 'administrator',\n                permission: 'ALLOW'\n            },\n            {\n                accessType: 'findById',\n                role: 'owner',\n                permission: 'ALLOW'\n            },\n            {\n                accessType: 'updateById',\n                role: 'owner',\n                permission: 'ALLOW'\n            },\n        ];\n    }\n\n    /**\n     * Check model permission\n     * @param req\n     * @param accessType\n     * @param id\n     */\n    checkPermission(req, accessType = '*', id = null) {\n\n\n        return new Promise((resolve, reject) => {\n\n            this.ctx.models.user.getUserRolesFromRequest(req).then((roles) => {\n\n\n                this.roleRegister(req, accessType, id).then((dynamicRoles) => {\n                    roles = roles.concat(dynamicRoles);\n\n                    this.checkPermissionByRoles(roles, accessType).then(() => {\n\n                        return resolve(true);\n\n                    }).catch((err) => {\n                        return reject(err);\n                    })\n\n\n                });\n            });\n\n        });\n\n    }\n\n\n    /**\n     * Check permission by roles and access type\n     * @param roles\n     * @param accessType\n     * @returns {Promise<any>}\n     */\n    checkPermissionByRoles(roles = [], accessType = '*') {\n\n\n        let isAllowed = true;\n        const permissions = this.permissions();\n\n\n        _.each(roles, (role) => {\n\n            _.each(permissions, (perm) => {\n                const accessTypeRule = _.get(perm, 'accessType');\n\n                if ((accessTypeRule === '*' || accessTypeRule === accessType) && role === _.get(perm, 'role') && _.get(perm, 'permission') === 'ALLOW') {\n                    isAllowed = true;\n                }\n                if ((accessTypeRule === '*' || accessTypeRule === accessType) && role === _.get(perm, 'role') && _.get(perm, 'permission') === 'DENY') {\n                    isAllowed = false;\n                }\n\n            });\n        });\n\n        return new Promise((resolve, reject) => {\n            return isAllowed ? resolve(true) : reject('Access denied.');\n        });\n\n\n    }\n\n    /**\n     *\n     * @param req\n     * @param accessType\n     * @param id\n     * @returns {Promise<void>}\n     */\n    async roleRegister(req, accessType = '', id = null) {\n\n\n        const userId = _.get(req, 'token.userId');\n        let model = null;\n\n        if (id) {\n            try {\n                model = await this.load(id);\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n\n            if (!id || !userId || !ObjectID.isValid(id) || !ObjectID.isValid(userId)) {\n                return resolve([]);\n            }\n\n            if (accessType === 'findById' || accessType === 'updateById' || accessType === 'deleteById' && (userId && id)) {\n\n                if (this.modelName === 'user') {\n\n\n                    if (_.toString(_.get(model, '_id')) === _.toString(userId)) {\n                        return resolve(['owner']);\n                    }\n\n                } else {\n                    if (_.toString(_.get(model, 'userId')) === _.toString(userId)) {\n\n                        return resolve(['owner'])\n                    }\n                }\n                return resolve([]);\n            }\n            else {\n                return resolve([]);\n            }\n        });\n\n    }\n\n\n    /**\n     * Queries\n     * @returns {{}}\n     */\n    query() {\n\n        return {\n            [this.modelName]: {\n                type: this.schema(),\n                args: {\n                    _id: {\n                        type: GraphQLID\n                    }\n                },\n                resolve: async (value, args, request) => {\n\n                    const id = _.get(args, '_id');\n                    let model = null;\n                    let allowed = false;\n                    try {\n                        allowed = await this.checkPermission(request, 'findById', id);\n                    }\n                    catch (err) {\n                        allowed = false;\n                    }\n\n                    return new Promise((resolve, reject) => {\n                        try {\n                            model = this.load(id);\n                        } catch (err) {\n                            console.log(err);\n                        }\n                        if (!allowed) {\n                            return reject(\"Access denied\");\n                        }\n\n                        this.load(id).then((model) => {\n                            return resolve(model);\n                        }).catch((err) => reject(err));\n\n                    });\n\n\n                }\n            },\n            [`${this.modelName}s`]: {\n\n                type: new GraphQLList(this.schema()),\n                args: {\n                    limit: {\n                        type: GraphQLInt,\n                        defaultValue: 50,\n                    },\n                    skip: {\n                        type: GraphQLInt,\n                        defaultValue: 0,\n                    },\n\n                },\n                resolve: async (value, args, request) => {\n\n                    let allowed = false;\n                    try {\n                        allowed = await this.checkPermission(request, 'find', null);\n                    }\n                    catch (err) {\n                        allowed = false;\n                    }\n\n                    return new Promise((resolve, reject) => {\n\n                        if (!allowed) {\n                            return reject(\"Access denied.\");\n                        }\n\n\n                        const filter = {\n                            limit: _.get(args, 'limit', 50),\n                            skip: _.get(args, 'skip', 0),\n                        };\n\n                        this.find(null, filter).then((results) => {\n\n                            return resolve(results);\n                        }).catch((err) => {\n\n                            return reject(err);\n                        });\n\n                    });\n\n\n                }\n            },\n            [`count_${this.modelName}`]: {\n                type: new GraphQLObjectType({\n                    name: `${this.modelName}_count`,\n                    fields: () => ({\n                        count: {\n                            type: GraphQLInt,\n                            defaultValue: 0,\n                        }\n                    })\n                }),\n                args: {},\n                resolve: async (value, args, request) => {\n\n                    let allowed = false;\n                    try {\n                        allowed = await this.checkPermission(request, 'count', null);\n                    }\n                    catch (err) {\n                        allowed = false;\n                    }\n\n                    return new Promise((resolve, reject) => {\n\n                        if (!allowed) {\n                            return reject(\"Access denied.\");\n                        }\n                        this.count(null, null).then((results) => {\n\n                            return resolve({count: results});\n                        }).catch((err) => {\n\n                            return reject(err);\n                        });\n\n                    });\n\n\n                }\n            }\n\n        }\n    }\n\n\n    /**\n     * Mutations\n     * @returns {{}}\n     */\n    mutation() {\n\n        let fields = this.fields();\n        _.unset(fields, '_id');\n\n        return {\n            [`create_${this.modelName}`]: {\n                type: this.schema(),\n                args: fields,\n                resolve: async (root, args, request) => {\n\n                    let allowed = false;\n                    try {\n                        allowed = await this.checkPermission(request, 'create', null);\n                    }\n                    catch (err) {\n                        allowed = false;\n                    }\n                    return new Promise((resolve, reject) => {\n\n                        if (!allowed) {\n                            return reject(\"Access denied.\");\n                        }\n\n                        this.create(args).then((model) => {\n\n                            return resolve(model)\n                        }).catch((err) => {\n\n                            return reject(err);\n                        })\n                    });\n\n                }\n            },\n            [`update_${this.modelName}`]: {\n\n                type: this.schema(),\n                args: this.fields(),\n                resolve: async (value, args, request) => {\n\n                    const id = _.get(args, '_id');\n                    let allowed = false;\n                    try {\n                        allowed = await this.checkPermission(request, 'updateById', id);\n                    }\n                    catch (err) {\n                        console.log(err);\n                    }\n\n                    return new Promise((resolve, reject) => {\n\n                        if (!allowed) {\n                            return reject('Access denied.');\n                        }\n\n                        this.update(id, args).then((model) => {\n\n                            return resolve(model);\n                        }).catch((err) => reject(err));\n                    });\n\n                }\n            },\n\n            [`delete_${this.modelName}`]: {\n                type: this.schema(),\n                args: {\n                    _id: {\n                        type: new GraphQLNonNull(GraphQLID)\n                    },\n                },\n                resolve: async (value, args, request) => {\n\n                    const id = _.get(args, '_id');\n                    let allowed = false;\n\n                    try {\n                        allowed = await this.checkPermission(request, 'deleteById', id);\n                    }\n                    catch (err) {\n                        console.log(err);\n                    }\n\n                    return new Promise((resolve, reject) => {\n\n                        if (!allowed) {\n                            return reject(\"Access denied\");\n                        }\n\n                        this.delete(id).then((data) => {\n\n                            return resolve(data);\n                        }).catch((err) => {\n                            return reject(err);\n                        });\n                    });\n\n\n                }\n            }\n\n        }\n    }\n\n    /**\n     * Schema\n     * @returns {null|GraphQLObjectType}\n     */\n    schema() {\n\n        if (this._schema) {\n            return this._schema;\n        }\n        this._schema = new GraphQLObjectType({\n            name: this.modelName,\n            description: `${this.modelName}`,\n            fields: () => (this.fields())\n        });\n\n        return this._schema;\n    }\n\n    /**\n     * Fields\n     * @returns {null|*}\n     */\n    fields() {\n\n        if (this._fields) {\n            return this._fields;\n        }\n\n        this._fields = {\n            _id: {type: GraphQLID},\n        };\n\n        return this._fields;\n\n    }\n\n}"]}