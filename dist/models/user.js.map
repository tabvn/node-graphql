{"version":3,"sources":["../../src/models/user.js"],"names":["User","ctx","userRoles","id","Promise","resolve","reject","then","relations","models","token","user_role","each","relation","find","userId","results","result","delete","get","catch","err","isValid","roles","toString","length","objectId","query","$lookup","from","modelName","localField","foreignField","as","$unwind","path","preserveNullAndEmptyArrays","$match","$eq","$project","_id","name","role","aggregate","push","set","req","getUserRoles","concat","email","password","isEmail","toLower","findOne","model","originalPassword","isMatched","compareSync","create","created","Date","setWith","type","firstName","lastName","unique","required","minLength","active","defaultValue","online","updated","parentQuery","me","schema","args","value","request","load","user","roleOwner","Object","assign","parentMutation","mutation","login","fields","logout","success","updateUserRoles","allowed","checkPermission","roleNames","uniq","user_roles","$in","roleId","collection","deleteMany","info","insertMany"],"mappings":"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","file":"user.js","sourcesContent":["import {\n    GraphQLString,\n    GraphQLNonNull,\n    GraphQLID,\n    GraphQLBoolean,\n    GraphQLObjectType,\n    GraphQLList,\n} from 'graphql';\nimport Model from './model'\nimport DateTime from '../types/datetime'\nimport Email from '../types/email'\nimport _ from 'lodash'\nimport bcrypt from 'bcrypt'\nimport {Map} from 'immutable'\nimport {ObjectID} from 'mongodb'\n\nexport default class User extends Model {\n\n    constructor(ctx) {\n\n        super(ctx, 'user');\n        this.userRoles = new Map();\n\n    }\n\n    /**\n     * Event before model is delete\n     * @param id\n     * @returns {Promise<any>}\n     */\n    beforeDelete(id) {\n\n        return new Promise((resolve, reject) => {\n\n            super.beforeDelete(id).then(id => {\n\n\n                const relations = [\n                    this.ctx.models.token,\n                    this.ctx.models.user_role\n                ];\n\n                _.each(relations, (relation) => {\n\n                    relation.find({userId: id}).then((results) => {\n\n                        _.each(results, (result) => {\n\n                            relation.delete(_.get(result, '_id')).then(() => {\n\n                            });\n                        })\n\n                    });\n\n                });\n\n\n                return resolve(id);\n\n            }).catch((err) => {\n                return reject(err);\n            })\n        })\n    }\n\n    /**\n     * Create default user\n     */\n\n\n    /**\n     * Get user roles name array\n     * @param id\n     * @returns {Promise<any>}\n     */\n    getUserRoles(id) {\n\n        return new Promise((resolve, reject) => {\n\n            if (!id || !ObjectID.isValid(id)) {\n                return reject(\"Invalid user Id\")\n            }\n\n            // find in cache\n            let roles = this.userRoles.get(_.toString(id));\n            if (roles && roles.length) {\n                return resolve(roles);\n            }\n\n            const userId = this.objectId(id);\n\n\n            let query = [\n\n                {\n                    $lookup: {\n                        from: this.ctx.models.user_role.modelName,\n                        localField: '_id',\n                        foreignField: 'roleId',\n                        as: 'user_role'\n                    },\n                },\n                {$unwind: {path: \"$user_role\", preserveNullAndEmptyArrays: true}},\n                {\n                    $match: {\n                        \"user_role.userId\": {$eq: userId}\n                    }\n                },\n                {\n                    $project: {\n                        _id: false,\n                        name: \"$name\"\n                    }\n                }\n\n\n            ];\n\n\n            this.ctx.models.role.aggregate(query).then((results) => {\n\n                let roles = [];\n\n                _.each(results, (result) => {\n                    roles.push(result.name);\n                });\n                // save cache\n                this.userRoles = this.userRoles.set(_.toString(id), roles);\n\n                return resolve(roles);\n\n            }).catch(err => reject(err));\n\n\n        })\n\n    }\n\n    /**\n     * Get user role from request.\n     * @param req\n     * @param cb\n     * @returns {Promise<any>}\n     */\n    getUserRolesFromRequest(req) {\n\n        const userId = _.get(req, 'token.userId');\n\n\n        let roles = ['everyone'];\n\n\n        return new Promise((resolve, reject) => {\n            if (!userId) {\n                return resolve(roles);\n            }\n            roles.push('authenticated');\n\n            this.getUserRoles(userId).then((results) => {\n\n                if (results && results.length) {\n                    roles = roles.concat(results);\n                }\n\n\n                return resolve(roles);\n\n            }).catch((err) => {\n\n                return reject(err);\n            })\n\n        });\n\n\n    }\n\n    /**\n     * Login user\n     * @param email\n     * @param password\n     * @returns {Promise<any>}\n     */\n    login(email, password) {\n\n        return new Promise((resolve, reject) => {\n            if (!email || !this.isEmail(email)) {\n                return reject(\"Invalid Email\");\n            }\n            if (!password || password === \"\") {\n                return reject(\"Password is required\");\n            }\n\n            email = _.toLower(email);\n            this.findOne({email: email}).then((model) => {\n\n                if (model === null) {\n                    return reject(\"Login Error\");\n                }\n                const originalPassword = _.get(model, 'password');\n                const isMatched = bcrypt.compareSync(password, originalPassword);\n                if (isMatched) {\n\n                    this.ctx.models.token.create({\n                        userId: _.get(model, '_id'),\n                        created: new Date(),\n                    }).then((token) => {\n                        token = _.setWith(token, 'user', model);\n\n                        return resolve(token);\n\n                    }).catch((err) => {\n                        return reject(err);\n                    });\n\n                } else {\n                    return reject(\"Password does not match.\");\n                }\n\n\n            }).catch((err) => {\n\n                return reject('Login Error');\n            })\n        });\n    }\n\n    /**\n     *\n     * @returns {{_id: {type}, firstName: {type}, lastName: {type}, email: {type, unique: boolean, email: boolean, required: boolean}, password: {type, password: boolean, required: boolean, minLength: number}, active: {type, defaultValue: boolean}, created: {type, defaultValue: Date}}}\n     */\n    fields() {\n        return {\n            _id: {type: GraphQLID},\n            firstName: {type: new GraphQLNonNull(GraphQLString)},\n            lastName: {type: new GraphQLNonNull(GraphQLString)},\n            email: {type: Email, unique: true, email: true, required: true},\n            password: {type: GraphQLString, password: true, required: true, minLength: 3},\n            active: {type: GraphQLBoolean, defaultValue: true},\n            online: {\n                type: GraphQLBoolean,\n                defaultValue: false,\n            },\n            created: {\n                type: DateTime,\n                defaultValue: new Date(),\n            },\n            updated: {\n                type: DateTime,\n                defaultValue: null,\n            }\n        }\n    }\n\n    query() {\n\n        const parentQuery = super.query();\n\n        const query = {\n            me: {\n                type: this.schema(),\n                args: {},\n                resolve: (value, args, request) => {\n                    const userId = _.get(request, 'token.userId');\n\n                    return new Promise((resolve, reject) => {\n\n                        this.load(userId).then((user) => {\n                            return resolve(user);\n                        }).catch(() => {\n                            return reject(\"Access denied\");\n                        });\n\n                    });\n\n\n                }\n            },\n            roleOwner: {\n                type: new GraphQLList(GraphQLString),\n                args: {\n                    _id: {\n                        type: GraphQLNonNull(GraphQLString),\n                    }\n                },\n                resolve: (value, args, request) => {\n\n                    return new Promise((resolve, reject) => {\n\n                        const userId = _.get(args, '_id');\n\n                        return this.getUserRoles(userId).then((roles) => {\n                            return resolve(roles);\n                        }).catch((err) => {\n                            return reject(err);\n                        });\n                    });\n\n\n                }\n            }\n        };\n\n        return Object.assign(parentQuery, query);\n    }\n\n    /**\n     * Implements mutation\n     */\n    mutation() {\n\n        const parentMutation = super.mutation();\n\n        const mutation = {\n            login: {\n                type: new GraphQLObjectType({\n                    name: 'login',\n                    fields: () => (Object.assign(this.ctx.models.token.fields(), {\n                        user: {\n                            type: this.schema(),\n                        }\n                    }))\n                }),\n                args: {\n                    email: {\n                        name: 'email',\n                        type: GraphQLNonNull(Email),\n                    },\n                    password: {\n                        name: 'password',\n                        type: GraphQLNonNull(GraphQLString),\n                    }\n                },\n                resolve: (value, args, request) => {\n\n\n                    return this.login(_.get(args, 'email'), _.get(args, 'password'));\n                }\n            },\n            logout: {\n\n                type: new GraphQLObjectType({\n                    name: 'logout',\n                    fields: () => ({\n                        success: {\n                            type: GraphQLBoolean,\n                            defaultValue: true,\n                        }\n                    })\n                }),\n                args: {\n                    token: {\n                        name: 'token',\n                        type: GraphQLNonNull(GraphQLString),\n                    }\n                },\n                resolve: (value, args, request) => {\n\n                    return new Promise((resolve, reject) => {\n\n                        this.ctx.models.token.delete(_.get(args, 'token')).then(() => {\n\n                            return resolve({\n                                success: true,\n                            });\n\n                        }).catch((err) => {\n                            return reject(err);\n                        })\n\n                    });\n\n                }\n            },\n            updateUserRoles: {\n                type: new GraphQLObjectType({\n                    name: 'user_roles',\n                    fields: () => (\n                        {\n                            roles: {\n                                type: new GraphQLList(GraphQLString),\n                                defaultValue: [],\n                            }\n                        }\n                    )\n                }),\n                args: {\n                    roles: {\n                        type: GraphQLList(GraphQLString),\n                        defaultValue: [],\n                    },\n                    _id: {\n                        type: GraphQLNonNull(GraphQLString),\n                    }\n                },\n                resolve: async (value, args, request) => {\n                    let allowed = false;\n                    try {\n                        allowed = await this.checkPermission(request, 'find', null);\n                    }\n                    catch (err) {\n                        allowed = false;\n                    }\n\n                    return new Promise((resolve, reject) => {\n                        if (!allowed) {\n                            return reject(\"Access denied.\");\n                        }\n\n                        let roleNames = _.get(args, 'roles', []);\n                        const userId = this.objectId(_.get(args, '_id'));\n\n                        roleNames = _.uniq(roleNames);\n\n                        let user_roles = [];\n\n                        if (roleNames.length) {\n                            this.ctx.models.role.find({name: {$in: roleNames}}).then((roles) => {\n\n\n                                _.each(roles, (role) => {\n\n                                    user_roles.push(({\n                                        userId: userId,\n                                        roleId: role._id,\n                                    }));\n                                });\n\n                                this.ctx.models.user_role.collection.deleteMany({userId: userId}, (err, info) => {\n                                    this.ctx.models.user_role.collection.insertMany(user_roles, (err, info) => {\n\n\n                                        if (err) {\n                                            return reject(err);\n                                        }\n                                        this.userRoles = this.userRoles.set(_.get(args, '_id'), roleNames);\n                                        return resolve({roles: roleNames});\n\n                                    });\n                                })\n\n                                // console.log(roles);\n\n                            }).catch((err) => {\n                                return reject(err);\n                            })\n                        } else {\n\n                            this.ctx.models.user_role.collection.deleteMany({userId: userId}, (err, info) => {\n                                this.userRoles = this.userRoles.set(_.get(args, '_id'), []);\n                                return err ? reject(err) : resolve({roles: []});\n                            })\n\n                        }\n\n\n                    });\n                }\n            }\n        };\n\n        return Object.assign(parentMutation, mutation);\n    }\n\n}"]}