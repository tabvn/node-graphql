{"version":3,"sources":["../../src/types/url.js"],"names":["URL_REGEX","RegExp","name","description","serialize","value","TypeError","test","parseValue","parseLiteral","ast","kind","STRING"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEA;AACA,IAAMA,YAAY,IAAIC,MAAJ,CAAW,iNAAX,CAAlB;;kBAEe,+BAAsB;AACjCC,UAAM,KAD2B;;AAGjC;AACAC,iBAAa,wHAJoB;;AAMjCC,aANiC,qBAMvBC,KANuB,EAMhB;AACb,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,kBAAM,IAAIC,SAAJ,2BAAsCD,KAAtC,CAAN;AACH;;AAED,YAAI,CAACL,UAAUO,IAAV,CAAeF,KAAf,CAAL,EAA4B;AACxB,kBAAM,IAAIC,SAAJ,gCAA2CD,KAA3C,CAAN;AACH;;AAED,eAAOA,KAAP;AACH,KAhBgC;AAkBjCG,cAlBiC,sBAkBtBH,KAlBsB,EAkBf;AACd,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,kBAAM,IAAIC,SAAJ,2BAAsCD,KAAtC,CAAN;AACH;;AAED,YAAI,CAACL,UAAUO,IAAV,CAAeF,KAAf,CAAL,EAA4B;AACxB,kBAAM,IAAIC,SAAJ,gCAA2CD,KAA3C,CAAN;AACH;;AAED,eAAOA,KAAP;AACH,KA5BgC;AA8BjCI,gBA9BiC,wBA8BpBC,GA9BoB,EA8Bf;AACd,YAAIA,IAAIC,IAAJ,KAAa,eAAKC,MAAtB,EAA8B;AAC1B,kBAAM,0EAAiEF,IAAIC,IAArE,CAAN;AACH;;AAED,YAAI,CAACX,UAAUO,IAAV,CAAeG,IAAIL,KAAnB,CAAL,EAAgC;AAC5B,kBAAM,IAAIC,SAAJ,gCAA2CI,IAAIL,KAA/C,CAAN;AACH;;AAED,eAAOK,IAAIL,KAAX;AACH;AAxCgC,CAAtB,C","file":"url.js","sourcesContent":["import { GraphQLScalarType } from 'graphql';\nimport { GraphQLError } from 'graphql/error';\nimport { Kind } from 'graphql/language';\n\n// eslint-disable-next-line no-useless-escape, max-len\nconst URL_REGEX = new RegExp(/(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]\\.[^\\s]{2,})/);\n\nexport default new GraphQLScalarType({\n    name: 'URL',\n\n    // eslint-disable-next-line max-len\n    description: 'A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.',\n\n    serialize(value) {\n        if (typeof value !== 'string') {\n            throw new TypeError(`Value is not string: ${value}`);\n        }\n\n        if (!URL_REGEX.test(value)) {\n            throw new TypeError(`Value is not a valid URL: ${value}`);\n        }\n\n        return value;\n    },\n\n    parseValue(value) {\n        if (typeof value !== 'string') {\n            throw new TypeError(`Value is not string: ${value}`);\n        }\n\n        if (!URL_REGEX.test(value)) {\n            throw new TypeError(`Value is not a valid URL: ${value}`);\n        }\n\n        return value;\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as URLs but got a: ${ast.kind}`);\n        }\n\n        if (!URL_REGEX.test(ast.value)) {\n            throw new TypeError(`Value is not a valid URL: ${ast.value}`);\n        }\n\n        return ast.value;\n    },\n});"]}