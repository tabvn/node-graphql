{"version":3,"sources":["../../src/types/datetime.js"],"names":["name","description","serialize","value","Date","TypeError","isNaN","getTime","toJSON","parseValue","date","parseLiteral","ast","kind","STRING","result"],"mappings":";;;;;;AAAA;;AACA;;AACA;;kBAEe,+BAAsB;AACjCA,UAAM,UAD2B;;AAGjC;AACAC,iBAAa,kDAJoB;;AAMjCC,aANiC,qBAMvBC,KANuB,EAMhB;AACb,YAAI,EAAEA,iBAAiBC,IAAnB,CAAJ,EAA8B;AAC1B,kBAAM,IAAIC,SAAJ,wCAAmDF,KAAnD,CAAN;AACH;;AAED,YAAIG,MAAMH,MAAMI,OAAN,EAAN,CAAJ,EAA4B;AACxB,kBAAM,IAAIF,SAAJ,iCAA4CF,KAA5C,CAAN;AACH;;AAED,eAAOA,MAAMK,MAAN,EAAP;AACH,KAhBgC;AAkBjCC,cAlBiC,sBAkBtBN,KAlBsB,EAkBf;AACd,YAAMO,OAAO,IAAIN,IAAJ,CAASD,KAAT,CAAb;;AAEA,YAAIG,MAAMI,KAAKH,OAAL,EAAN,CAAJ,EAA2B;AACvB,kBAAM,IAAIF,SAAJ,iCAA4CF,KAA5C,CAAN;AACH;;AAED,eAAOO,IAAP;AACH,KA1BgC;AA4BjCC,gBA5BiC,wBA4BpBC,GA5BoB,EA4Bf;AACd,YAAIA,IAAIC,IAAJ,KAAa,eAAKC,MAAtB,EAA8B;AAC1B,kBAAM,wEAA+DF,IAAIC,IAAnE,CAAN;AACH;;AAED,YAAME,SAAS,IAAIX,IAAJ,CAASQ,IAAIT,KAAb,CAAf;;AAEA,YAAIG,MAAMS,OAAOR,OAAP,EAAN,CAAJ,EAA6B;AACzB,kBAAM,wDAA+CK,IAAIT,KAAnD,CAAN;AACH;AACD,YAAIS,IAAIT,KAAJ,KAAcY,OAAOP,MAAP,EAAlB,EAAmC;AAC/B,kBAAM,0FAAiFI,IAAIT,KAArF,CAAN;AACH;AACD,eAAOY,MAAP;AACH;AA1CgC,CAAtB,C","file":"datetime.js","sourcesContent":["import {GraphQLScalarType} from 'graphql';\nimport {GraphQLError} from 'graphql/error';\nimport {Kind} from 'graphql/language';\n\nexport default new GraphQLScalarType({\n    name: 'DateTime',\n\n    // eslint-disable-next-line max-len\n    description: 'Use JavaScript Date object for date/tiem fields.',\n\n    serialize(value) {\n        if (!(value instanceof Date)) {\n            throw new TypeError(`Value is not an instance of Date: ${value}`);\n        }\n\n        if (isNaN(value.getTime())) {\n            throw new TypeError(`Value is not a valid Date: ${value}`);\n        }\n\n        return value.toJSON();\n    },\n\n    parseValue(value) {\n        const date = new Date(value);\n\n        if (isNaN(date.getTime())) {\n            throw new TypeError(`Value is not a valid Date: ${value}`);\n        }\n\n        return date;\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only parse strings to dates but got a: ${ast.kind}`);\n        }\n\n        const result = new Date(ast.value);\n\n        if (isNaN(result.getTime())) {\n            throw new GraphQLError(`Value is not a valid Date: ${ast.value}`);\n        }\n        if (ast.value !== result.toJSON()) {\n            throw new GraphQLError(`Value is not a valid Date format (YYYY-MM-DDTHH:MM:SS.SSSZ): ${ast.value}`);\n        }\n        return result;\n    },\n});"]}