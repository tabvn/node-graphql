{"version":3,"sources":["../../src/types/email.js"],"names":["EMAIL_ADDRESS_REGEX","RegExp","name","description","serialize","value","TypeError","test","parseValue","parseLiteral","ast","kind","STRING"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAEA;AACA,IAAMA,sBAAsB,IAAIC,MAAJ,CAAW,wJAAX,CAA5B;;kBAEe,+BAAsB;AACjCC,UAAM,OAD2B;;AAGjC;AACAC,iBAAa,0IAJoB;;AAMjCC,aANiC,qBAMvBC,KANuB,EAMhB;AACb,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,kBAAM,IAAIC,SAAJ,2BAAsCD,KAAtC,CAAN;AACH;;AAED,YAAI,CAACL,oBAAoBO,IAApB,CAAyBF,KAAzB,CAAL,EAAsC;AAClC,kBAAM,IAAIC,SAAJ,0CAAqDD,KAArD,CAAN;AACH;;AAED,eAAOA,KAAP;AACH,KAhBgC;AAkBjCG,cAlBiC,sBAkBtBH,KAlBsB,EAkBf;AACd,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,kBAAM,IAAIC,SAAJ,CAAc,qBAAd,CAAN;AACH;;AAED,YAAI,CAACN,oBAAoBO,IAApB,CAAyBF,KAAzB,CAAL,EAAsC;AAClC,kBAAM,IAAIC,SAAJ,0CAAqDD,KAArD,CAAN;AACH;;AAED,eAAOA,KAAP;AACH,KA5BgC;AA8BjCI,gBA9BiC,wBA8BpBC,GA9BoB,EA8Bf;AACd,YAAIA,IAAIC,IAAJ,KAAa,eAAKC,MAAtB,EAA8B;AAC1B,kBAAM,qFAA4EF,IAAIC,IAAhF,CAAN;AACH;;AAED,YAAI,CAACX,oBAAoBO,IAApB,CAAyBG,IAAIL,KAA7B,CAAL,EAA0C;AACtC,kBAAM,IAAIC,SAAJ,0CAAqDI,IAAIL,KAAzD,CAAN;AACH;;AAED,eAAOK,IAAIL,KAAX;AACH;AAxCgC,CAAtB,C","file":"email.js","sourcesContent":["import {GraphQLScalarType} from 'graphql';\nimport {GraphQLError} from 'graphql/error';\nimport {Kind} from 'graphql/language';\n\n// eslint-disable-next-line no-useless-escape, max-len\nconst EMAIL_ADDRESS_REGEX = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n\nexport default new GraphQLScalarType({\n    name: 'Email',\n\n    // eslint-disable-next-line max-len\n    description: 'A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.',\n\n    serialize(value) {\n        if (typeof value !== 'string') {\n            throw new TypeError(`Value is not string: ${value}`);\n        }\n\n        if (!EMAIL_ADDRESS_REGEX.test(value)) {\n            throw new TypeError(`Value is not a valid email address: ${value}`);\n        }\n\n        return value;\n    },\n\n    parseValue(value) {\n        if (typeof value !== 'string') {\n            throw new TypeError('Value is not string');\n        }\n\n        if (!EMAIL_ADDRESS_REGEX.test(value)) {\n            throw new TypeError(`Value is not a valid email address: ${value}`);\n        }\n\n        return value;\n    },\n\n    parseLiteral(ast) {\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(`Can only validate strings as email addresses but got a: ${ast.kind}`);\n        }\n\n        if (!EMAIL_ADDRESS_REGEX.test(ast.value)) {\n            throw new TypeError(`Value is not a valid email address: ${ast.value}`);\n        }\n\n        return ast.value;\n    },\n});"]}