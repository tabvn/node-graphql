{"version":3,"sources":["../src/index.js"],"names":["PORT","app","server","createServer","use","exposedHeaders","wss","Server","ctx","then","db","models","getModels","realtime","catch","err","handleRequest","request","tokenId","header","get","token","load","schema","graphiql","static","join","__dirname","listen","console","log","address","port"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,sBAAN;;AAEA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAEAA,IAAIG,GAAJ,CAAQ,oBAAK;AACTC,oBAAgB;AADP,CAAL,CAAR;;AAIAJ,IAAIK,GAAJ,GAAU,IAAI,cAAgBC,MAApB,CAA2B;AACjCL,YAAQD,IAAIC;AADqB,CAA3B,CAAV;;AAKA,IAAIM,MAAM,EAAV;;AAEA,mBAAUC,IAAV,CAAe,UAACC,EAAD,EAAQ;AACnBF,QAAIE,EAAJ,GAASA,EAAT;AACAF,QAAIG,MAAJ,GAAa,qBAAWH,GAAX,EAAgBI,SAAhB,EAAb;AACAJ,QAAIF,GAAJ,GAAUL,IAAIK,GAAd;AACAE,QAAIK,QAAJ,GAAe,uBAAaL,GAAb,CAAf;;AAEA,wBAAKA,GAAL;AAGH,CATD,EASGM,KATH,CASS,UAACC,GAAD,EAAS;AACd,UAAMA,GAAN;AACH,CAXD;;AAaAd,IAAIO,GAAJ,GAAUA,GAAV;;AAEA,IAAMQ,gBAAgB;AAAA,uEAAY,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1BC,+BAF0B,GAEhBD,QAAQE,MAAR,CAAe,eAAf,CAFgB;;AAG9B,4BAAG,CAACD,OAAJ,EAAY;AACRA,sCAAU,iBAAEE,GAAF,CAAMH,OAAN,EAAe,YAAf,EAA6B,IAA7B,CAAV;AACH;;AAEDA,gCAAQT,GAAR,GAAcA,GAAd;AACIa,6BAR0B,GAQlB,IARkB;;AAAA,6BAS1BH,OAT0B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAWRV,IAAIG,MAAJ,CAAWU,KAAX,CAAiBC,IAAjB,CAAsBJ,OAAtB,CAXQ;;AAAA;AAWtBG,6BAXsB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAatBA,gCAAQ,IAAR;;AAbsB;;AAiB9BJ,gCAAQI,KAAR,GAAgBA,KAAhB;;AAjB8B,yDAmBvB;AACHE,oCAAQ,qBAAWf,GAAX,EAAgBe,MAAhB,EADL;AAEHC,sCAAU,qBAAa,KAAb,GAAqB;AAF5B,yBAnBuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,IAAtB;;AAyBAvB,IAAIG,GAAJ,CAAQ,MAAR,EAAgBY,aAAhB;AACAf,IAAIG,GAAJ,CAAQ,GAAR,EAAa,kBAAQqB,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAb;;AAEA1B,IAAIC,MAAJ,CAAW0B,MAAX,CAAkB5B,IAAlB,EAAwB,YAAM;AAC1B6B,YAAQC,GAAR,6BAAsC7B,IAAIC,MAAJ,CAAW6B,OAAX,GAAqBC,IAA3D;AACH,CAFD","file":"index.js","sourcesContent":["import http from 'http'\nimport path from 'path'\nimport express from 'express'\nimport graphqlHTTP from 'express-graphql'\nimport cors from 'cors'\nimport {connect} from './db'\nimport Models from './models'\nimport Schema from './schema'\nimport Realtime from \"./realtime\"\nimport WebSocketServer from 'uws'\nimport {appPort,production} from \"./config\"\nimport boot from './boot'\nimport _ from 'lodash'\n\nconst PORT = appPort;\n\nconst app = express();\napp.server = http.createServer(app);\n\napp.use(cors({\n    exposedHeaders: \"*\"\n}));\n\napp.wss = new WebSocketServer.Server({\n    server: app.server\n});\n\n\nlet ctx = {};\n\nconnect().then((db) => {\n    ctx.db = db;\n    ctx.models = new Models(ctx).getModels();\n    ctx.wss = app.wss;\n    ctx.realtime = new Realtime(ctx);\n\n    boot(ctx);\n\n\n}).catch((err) => {\n    throw err;\n});\n\napp.ctx = ctx;\n\nconst handleRequest = graphqlHTTP(async (request) => {\n\n    let tokenId = request.header('authorization');\n    if(!tokenId){\n        tokenId = _.get(request, 'query.auth', null);\n    }\n\n    request.ctx = ctx;\n    let token = null;\n    if (tokenId) {\n        try {\n            token = await ctx.models.token.load(tokenId);\n        } catch (err) {\n            token = null;\n        }\n    }\n\n    request.token = token;\n\n    return {\n        schema: new Schema(ctx).schema(),\n        graphiql: production ? false : true,\n    };\n});\n\napp.use('/api', handleRequest);\napp.use('/', express.static(path.join(__dirname, 'public')));\n\napp.server.listen(PORT, () => {\n    console.log(`App is running on port ${app.server.address().port}`);\n});"]}